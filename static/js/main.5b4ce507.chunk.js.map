{"version":3,"sources":["driver.js","App.js","firebaseConfig.js","serviceWorkerRegistration.js","index.js"],"names":["Driver","id","useParams","React","createElement","App","Router","basename","process","Routes","Route","path","element","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firebaseApp","messaging","getApps","length","getMessaging","initializeApp","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","getToken","vapidKey","currentToken","err","onMessage","payload","notificationTitle","notification","title","notificationOptions","body","icon","Notification","permission","ReactDOM","render","StrictMode","document","getElementById","URL","href","origin","addEventListener","concat","fetch","headers","Service-Worker","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"sLAQeA,MALf,WACE,MAAMC,GAAEA,GAAOC,cACf,OAAOC,IAAAC,cAAA,WAAK,cAAYH,ICUXI,MAXf,WACE,OACEF,IAAAC,cAACE,IAAM,CAACC,SAAUC,eAChBL,IAAAC,cAACK,IAAM,KACLN,IAAAC,cAACM,IAAK,CAACC,KAAK,cAAcC,QAAST,IAAAC,cAACJ,EAAM,QAC1CG,IAAAC,cAACM,IAAK,CAACC,KAAK,IAAIC,QAAST,IAAAC,cAAA,WAAK,gCCNtC,MAAMS,EAAiB,CACrBC,OAAQ,0CACRC,WAAY,mCACZC,UAAW,mBACXC,cAAe,+BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,gBAGjB,IAAIC,EACAC,EAECC,cAAUC,QAIbH,EAAcE,cAAU,GACxBD,EAAYG,YAAaJ,KAJzBA,EAAcK,YAAcb,GAC5BS,EAAYG,YAAaJ,IClB3B,MAAMM,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UACe,UAA7BF,OAAOC,SAASC,UAChBF,OAAOC,SAASC,SAASC,MACvB,2DAgCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,KAAMC,IACLA,EAAaC,cAAgB,MAC3B,MAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,MACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAC1BC,QAAQC,IACN,+GAIEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAGlBO,QAAQC,IAAI,sCAERb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,YAO5BW,MAAOC,IACNL,QAAQK,MAAM,4CAA6CA,KC7DjEC,YAAS/B,EAAW,CAAEgC,SAAU,gDAAiDf,KAAMgB,IACjFA,GACFR,QAAQC,IAAI,oCACZD,QAAQC,IAAI,SAAUO,IAItBR,QAAQC,IAAI,0EAIbG,MAAOK,IACRT,QAAQC,IAAI,6CAA8CQ,KAK5DC,YAAUnC,EAAYoC,IACpBX,QAAQC,IAAI,qBAAsBU,GAElC,MAAMC,EAAoBD,EAAQE,aAAaC,MACzCC,EAAsB,CAC1BC,KAAML,EAAQE,aAAaG,KAC3BC,KAAM,sBAGwB,YAA5BC,aAAaC,YACf,IAAID,aAAaN,EAAmBG,KAIxCK,IAASC,OACPjE,IAAAC,cAACD,IAAMkE,WAAU,KACflE,IAAAC,cAACC,EAAG,OAENiE,SAASC,eAAe,SDlCnB,SAAkBpC,GACvB,GAA6C,kBAAmBC,UAAW,CAEzE,GADkB,IAAIoC,IAAIhE,cAAwBqB,OAAOC,SAAS2C,MACpDC,SAAW7C,OAAOC,SAAS4C,OACvC,OAGF7C,OAAO8C,iBAAiB,OAAQ,KAC9B,MAAMzC,EAAK,GAAA0C,OAAMpE,cAAsB,6BAEnCmB,GAsDV,SAAiCO,EAAOC,GAEtC0C,MAAM3C,EAAO,CACX4C,QAAS,CAAEC,iBAAkB,YAE5BxC,KAAMyC,IAEL,MAAMC,EAAcD,EAASF,QAAQI,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5ChD,UAAUC,cAAcgD,MAAM9C,KAAMC,IAClCA,EAAa8C,aAAa/C,KAAK,KAC7BV,OAAOC,SAASyD,aAKpBtD,EAAgBC,EAAOC,KAG1BgB,MAAM,KACLJ,QAAQC,IACN,mEA7EAwC,CAAwBtD,EAAOC,GAE/BC,UAAUC,cAAcgD,MAAM9C,KAAK,KACjCQ,QAAQC,IACN,8GAMJf,EAAgBC,EAAOC,MCgB/BsD","file":"static/js/main.5b4ce507.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nfunction Driver() {\r\n  const { id } = useParams();\r\n  return <div>Driver ID: {id}</div>;\r\n}\r\n\r\nexport default Driver;\r\n","import React from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport Driver from './driver';\n\nfunction App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <Routes>\n        <Route path=\"/driver/:id\" element={<Driver />} />\n        <Route path=\"/\" element={<div>Home Page</div>} />\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;\n","import { initializeApp, getApps } from 'firebase/app';\r\nimport { getMessaging, getToken, onMessage } from 'firebase/messaging';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBKrtlWdUW7zO9g9zm9slaguHQmF6kJuV0\",\r\n  authDomain: \"diyouforklfitapp.firebaseapp.com\",\r\n  projectId: \"diyouforklfitapp\",\r\n  storageBucket: \"diyouforklfitapp.appspot.com\",\r\n  messagingSenderId: \"728063402975\",\r\n  appId: \"1:728063402975:web:ef09e7cb6df5ef0ddcda6a\",\r\n  measurementId: \"G-2QJDPH5EGW\"\r\n};\r\n\r\nlet firebaseApp;\r\nlet messaging;\r\n\r\nif (!getApps().length) {\r\n  firebaseApp = initializeApp(firebaseConfig);\r\n  messaging = getMessaging(firebaseApp);\r\n} else {\r\n  firebaseApp = getApps()[0];\r\n  messaging = getMessaging(firebaseApp);\r\n}\r\n\r\nexport { firebaseApp, messaging, getToken, onMessage };\r\n","const isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    window.location.hostname === '[::1]' ||\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/firebase-messaging-sw.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              console.log('Content is cached for offline use.');\r\n\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { messaging, getToken, onMessage } from './firebaseConfig';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\n// Request permission to send notifications\ngetToken(messaging, { vapidKey: 'qVbu8IcLjOokqpyf2rAFDH9yfm7cW4C131XYO2mTKho' }).then((currentToken) => {\n  if (currentToken) {\n    console.log('Notification permission granted.');\n    console.log('Token:', currentToken);\n    // Send the token to your server and update the UI if necessary\n    // ...\n  } else {\n    console.log('No registration token available. Request permission to generate one.');\n    // Show permission UI\n    // ...\n  }\n}).catch((err) => {\n  console.log('An error occurred while retrieving token. ', err);\n  // ...\n});\n\n// Handle incoming messages\nonMessage(messaging, (payload) => {\n  console.log('Message received. ', payload);\n  // Customize notification here\n  const notificationTitle = payload.notification.title;\n  const notificationOptions = {\n    body: payload.notification.body,\n    icon: '/firebase-logo.png'\n  };\n\n  if (Notification.permission === 'granted') {\n    new Notification(notificationTitle, notificationOptions);\n  }\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// Register the service worker\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}