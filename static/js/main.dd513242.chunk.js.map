{"version":3,"sources":["driver.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["Driver","id","useParams","React","createElement","App","Router","basename","process","Routes","Route","path","element","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","urlBase64ToUint8Array","base64String","base64","repeat","length","replace","rawData","atob","outputArray","Uint8Array","i","charCodeAt","ready","pushManager","subscribe","userVisibleOnly","applicationServerKey","subscription","fetch","concat","method","body","JSON","stringify","headers","Content-Type","err","ReactDOM","render","StrictMode","document","getElementById","URL","href","origin","addEventListener","Service-Worker","response","contentType","get","status","indexOf","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"kJAQeA,MALf,WACE,MAAMC,GAAEA,GAAOC,cACf,OAAOC,IAAAC,cAAA,WAAK,cAAYH,ICUXI,MAXf,WACE,OACEF,IAAAC,cAACE,IAAM,CAACC,SAAUC,eAChBL,IAAAC,cAACK,IAAM,KACLN,IAAAC,cAACM,IAAK,CAACC,KAAK,cAAcC,QAAST,IAAAC,cAACJ,EAAM,QAC1CG,IAAAC,cAACM,IAAK,CAACC,KAAK,IAAIC,QAAST,IAAAC,cAAA,WAAK,kBCTtC,MAAMS,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UACe,UAA7BF,OAAOC,SAASC,UAChBF,OAAOC,SAASC,SAASC,MACvB,2DAgCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,KAAMC,IACLA,EAAaC,cAAgB,MAC3B,MAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,MACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAC1BC,QAAQC,IACN,+GAIEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAGlBO,QAAQC,IAAI,sCAERb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,YAO5BW,MAAOC,IACNL,QAAQK,MAAM,4CAA6CA,KC5DjE,SAASC,EAAsBC,GAC7B,MACMC,GAAUD,EADA,IAAIE,QAAQ,EAAIF,EAAaG,OAAS,GAAK,IACnBC,QAAQ,KAAM,KAAKA,QAAQ,KAAM,KACnEC,EAAU9B,OAAO+B,KAAKL,GACtBM,EAAc,IAAIC,WAAWH,EAAQF,QAC3C,IAAK,IAAIM,EAAI,EAAGA,EAAIJ,EAAQF,SAAUM,EACpCF,EAAYE,GAAKJ,EAAQK,WAAWD,GAEtC,OAAOF,EAGTzB,UAAUC,cAAc4B,MAAM1B,KAAMC,IAElCA,EAAa0B,YAAYC,UAAU,CACjCC,iBAAiB,EACjBC,qBAAsBhB,EAHD,6FAIpBd,KAAK+B,IACNC,MAAK,GAAAC,OAnBS,wBAmBI,cAAc,CAC9BC,OAAQ,OACRC,KAAMC,KAAKC,UAAUN,GACrBO,QAAS,CACPC,eAAgB,wBAGnB3B,MAAM4B,GAAOhC,QAAQK,MAAM,uCAAwC2B,MAGxEC,IAASC,OACPhE,IAAAC,cAACD,IAAMiE,WAAU,KACfjE,IAAAC,cAACC,EAAG,OAENgE,SAASC,eAAe,SD/BnB,SAAkBjD,GACvB,GAA6C,kBAAmBC,UAAW,CAEzE,GADkB,IAAIiD,IAAI/D,cAAwBO,OAAOC,SAASwD,MACpDC,SAAW1D,OAAOC,SAASyD,OACvC,OAGF1D,OAAO2D,iBAAiB,OAAQ,KAC9B,MAAMtD,EAAK,GAAAsC,OAAMlD,cAAsB,6BAEnCK,GAsDV,SAAiCO,EAAOC,GAEtCoC,MAAMrC,EAAO,CACX2C,QAAS,CAAEY,iBAAkB,YAE5BlD,KAAMmD,IAEL,MAAMC,EAAcD,EAASb,QAAQe,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C1D,UAAUC,cAAc4B,MAAM1B,KAAMC,IAClCA,EAAauD,aAAaxD,KAAK,KAC7BV,OAAOC,SAASkE,aAKpB/D,EAAgBC,EAAOC,KAG1BgB,MAAM,KACLJ,QAAQC,IACN,mEA7EAiD,CAAwB/D,EAAOC,GAE/BC,UAAUC,cAAc4B,MAAM1B,KAAK,KACjCQ,QAAQC,IACN,8GAMJf,EAAgBC,EAAOC,MCY/B+D","file":"static/js/main.dd513242.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nfunction Driver() {\r\n  const { id } = useParams();\r\n  return <div>Driver ID: {id}</div>;\r\n}\r\n\r\nexport default Driver;\r\n","import React from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport Driver from './driver';\n\nfunction App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <Routes>\n        <Route path=\"/driver/:id\" element={<Driver />} />\n        <Route path=\"/\" element={<div>Home Page</div>} />\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;\n","const isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    window.location.hostname === '[::1]' ||\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/firebase-messaging-sw.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              console.log('Content is cached for offline use.');\r\n\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\n// URL of your backend server\nconst serverUrl = 'http://localhost:5000';\n\nfunction urlBase64ToUint8Array(base64String) {\n  const padding = '='.repeat((4 - base64String.length % 4) % 4);\n  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n\nnavigator.serviceWorker.ready.then((registration) => {\n  const publicVapidKey = 'BDTs1kysJabgnThBu5CBbF6diZhz6cxJtUhbuTyGHBfJDrBOy62ItIjUvJx64Ce0HkwFrppZzlbBdOrZAok3l1k';\n  registration.pushManager.subscribe({\n    userVisibleOnly: true,\n    applicationServerKey: urlBase64ToUint8Array(publicVapidKey),\n  }).then(subscription => {\n    fetch(`${serverUrl}/subscribe`, {\n      method: 'POST',\n      body: JSON.stringify(subscription),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n  }).catch(err => console.error('Could not subscribe to notifications', err));\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}