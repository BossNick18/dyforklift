{"version":3,"sources":["Driver.js","App.js","firebaseConfig.js","index.js"],"names":["initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","Driver","id","useParams","message","setMessage","useState","location","setLocation","useEffect","messaging","getMessaging","requestPermission","then","getToken","vapidKey","token","console","log","axios","post","topic","concat","response","data","catch","error","onMessage","payload","notification","body","updateAvailability","available","forkliftIndex","_jsxs","children","_jsx","onClick","completeTask","App","Router","basename","process","Routes","Route","path","element","firebaseConfig","firebaseApp","apps","length","currentToken","err","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"6NAgBAA,YAVuB,CACrBC,OAAQ,0CACRC,WAAY,mCACZC,UAAW,mBACXC,cAAe,+BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAoEFC,MA/Df,WACE,MAAM,GAAEC,GAAOC,eACRC,EAASC,GAAcC,mBAAS,KAChCC,EAAUC,GAAeF,mBAAS,MAEzCG,qBAAU,KACR,MAAMC,EAAYC,cAClBD,EAAUE,oBACPC,MAAK,IAAMH,EAAUI,SAAS,CAAEC,SAAU,kDAC1CF,MAAKG,IACJC,QAAQC,IAAI,SAAUF,GACfG,IAAMC,KAAK,uCAAwC,CAAEJ,QAAOK,MAAM,YAADC,OAAcpB,QAEvFW,MAAKU,IACJN,QAAQC,IAAI,uBAAwBK,EAASC,KAAK,IAEnDC,OAAMC,IACLT,QAAQS,MAAM,8BAA+BA,EAAM,IAGvDC,YAAUjB,GAAWkB,IACnBX,QAAQC,IAAI,oBAAqBU,GACjCvB,EAAWuB,EAAQC,aAAaC,MAChCtB,EAAYoB,EAAQJ,KAAKjB,SAAS,GAClC,GACD,CAACL,IAEJ,MAAM6B,EAAsBC,IAC1Bb,IAAMC,KAAK,iDAAkD,CAAEa,cAAe/B,EAAK,EAAG8B,cACnFnB,MAAKU,IACJN,QAAQC,IAAIK,EAASC,KAAK,IAE3BC,OAAMC,IACLT,QAAQS,MAAM,+BAAgCA,EAAM,GACpD,EAcN,OACEQ,eAAA,OAAAC,SAAA,CACEC,cAAA,MAAAD,SAAI,qBACJC,cAAA,KAAAD,SAAI/B,IACHG,GACC6B,cAAA,OAAAD,SACEC,cAAA,UAAQC,QAjBKC,KACnBnB,IAAMC,KAAK,2CAA4C,CAAEa,cAAe/B,EAAK,EAAGK,aAC7EM,MAAKU,IACJN,QAAQC,IAAIK,EAASC,MACrBhB,EAAY,KAAK,IAElBiB,OAAMC,IACLT,QAAQS,MAAM,yBAA0BA,EAAM,GAC9C,EASgCS,SAAC,oBAGnCC,cAAA,UAAQC,QAASA,IAAMN,GAAmB,GAAMI,SAAC,cACjDC,cAAA,UAAQC,QAASA,IAAMN,GAAmB,GAAOI,SAAC,oBAGxD,EChEeI,MAXf,WACE,OACEH,cAACI,IAAM,CAACC,SAAUC,cAAuBP,SACvCD,eAACS,IAAM,CAAAR,SAAA,CACLC,cAACQ,IAAK,CAACC,KAAK,cAAcC,QAASV,cAACnC,EAAM,MAC1CmC,cAACQ,IAAK,CAACC,KAAK,IAAIC,QAASV,cAAA,OAAAD,SAAK,oBAItC,ECVA,MAAMY,EAAiB,CACrBrD,OAAQ,0CACRC,WAAY,mCACZC,UAAW,mBACXC,cAAe,+BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,gBAGjB,IAAIgD,EACAtC,EAECjB,IAAcwD,KAAKC,SACtBF,EAAcvD,YAAcsD,GAC5BrC,EAAYC,YAAaqC,ICZ3BlC,YAASJ,EAAW,CAAEK,SAAU,gDAAiDF,MAAMsC,IACjFA,EACFlC,QAAQC,IAAI,oCAIZD,QAAQC,IAAI,uEAGd,IACCO,OAAO2B,IACRnC,QAAQC,IAAI,6CAA8CkC,EAAI,IAKhEzB,YAAUjB,GAAYkB,IACpBX,QAAQC,IAAI,qBAAsBU,EAAQ,IAI5CyB,IAASC,OACPlB,cAACmB,IAAMC,WAAU,CAAArB,SACfC,cAACG,EAAG,MAENkB,SAASC,eAAe,Q","file":"static/js/main.198902d8.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { getMessaging, onMessage } from 'firebase/messaging';\r\nimport { initializeApp } from 'firebase/app';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBKrtlWdUW7zO9g9zm9slaguHQmF6kJuV0\",\r\n  authDomain: \"diyouforklfitapp.firebaseapp.com\",\r\n  projectId: \"diyouforklfitapp\",\r\n  storageBucket: \"diyouforklfitapp.appspot.com\",\r\n  messagingSenderId: \"728063402975\",\r\n  appId: \"1:728063402975:web:ef09e7cb6df5ef0ddcda6a\",\r\n  measurementId: \"G-2QJDPH5EGW\"\r\n};\r\n\r\ninitializeApp(firebaseConfig);\r\n\r\nfunction Driver() {\r\n  const { id } = useParams();\r\n  const [message, setMessage] = useState('');\r\n  const [location, setLocation] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const messaging = getMessaging();\r\n    messaging.requestPermission()\r\n      .then(() => messaging.getToken({ vapidKey: 'qVbu8IcLjOokqpyf2rAFDH9yfm7cW4C131XYO2mTKho' }))\r\n      .then(token => {\r\n        console.log('Token:', token);\r\n        return axios.post('http://your-server-ip:5000/subscribe', { token, topic: `forklift-${id}` });\r\n      })\r\n      .then(response => {\r\n        console.log('Subscribed to topic:', response.data);\r\n      })\r\n      .catch(error => {\r\n        console.error('Error subscribing to topic:', error);\r\n      });\r\n\r\n    onMessage(messaging, payload => {\r\n      console.log('Message received:', payload);\r\n      setMessage(payload.notification.body);\r\n      setLocation(payload.data.location); // Assuming location is sent in data\r\n    });\r\n  }, [id]);\r\n\r\n  const updateAvailability = (available) => {\r\n    axios.post('http://your-server-ip:5000/update-availability', { forkliftIndex: id - 1, available })\r\n      .then(response => {\r\n        console.log(response.data);\r\n      })\r\n      .catch(error => {\r\n        console.error('Error updating availability:', error);\r\n      });\r\n  };\r\n\r\n  const completeTask = () => {\r\n    axios.post('http://your-server-ip:5000/complete-task', { forkliftIndex: id - 1, location })\r\n      .then(response => {\r\n        console.log(response.data);\r\n        setLocation(null);\r\n      })\r\n      .catch(error => {\r\n        console.error('Error completing task:', error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Driver Interface</h1>\r\n      <p>{message}</p>\r\n      {location && (\r\n        <div>\r\n          <button onClick={completeTask}>Complete Task</button>\r\n        </div>\r\n      )}\r\n      <button onClick={() => updateAvailability(true)}>Available</button>\r\n      <button onClick={() => updateAvailability(false)}>Not Available</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Driver;","import React from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport Driver from './Driver';\n\nfunction App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <Routes>\n        <Route path=\"/driver/:id\" element={<Driver />} />\n        <Route path=\"/\" element={<div>Home Page</div>} />\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;\n","import { initializeApp } from 'firebase/app';\r\nimport { getMessaging, getToken, onMessage } from 'firebase/messaging';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBKrtlWdUW7zO9g9zm9slaguHQmF6kJuV0\",\r\n  authDomain: \"diyouforklfitapp.firebaseapp.com\",\r\n  projectId: \"diyouforklfitapp\",\r\n  storageBucket: \"diyouforklfitapp.appspot.com\",\r\n  messagingSenderId: \"728063402975\",\r\n  appId: \"1:728063402975:web:ef09e7cb6df5ef0ddcda6a\",\r\n  measurementId: \"G-2QJDPH5EGW\"\r\n};\r\n\r\nlet firebaseApp;\r\nlet messaging;\r\n\r\nif (!initializeApp.apps.length) {\r\n  firebaseApp = initializeApp(firebaseConfig);\r\n  messaging = getMessaging(firebaseApp);\r\n}\r\n\r\nexport { firebaseApp, messaging, getToken, onMessage };\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { messaging, getToken, onMessage } from './firebaseConfig';\n\n// Request permission to send notifications\ngetToken(messaging, { vapidKey: 'qVbu8IcLjOokqpyf2rAFDH9yfm7cW4C131XYO2mTKho' }).then((currentToken) => {\n  if (currentToken) {\n    console.log('Notification permission granted.');\n    // Send the token to your server and update the UI if necessary\n    // ...\n  } else {\n    console.log('No registration token available. Request permission to generate one.');\n    // Show permission UI\n    // ...\n  }\n}).catch((err) => {\n  console.log('An error occurred while retrieving token. ', err);\n  // ...\n});\n\n// Handle incoming messages\nonMessage(messaging, (payload) => {\n  console.log('Message received. ', payload);\n  // ...\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}